/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cse360;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Jefferson
 */
public class MessagesUI extends javax.swing.JFrame {

    int currentMCount = 0;
    /**
     * Creates new form MessagesUI
     */
    public MessagesUI() {
        initComponents();
        try{
            String recieve = User.getUsername();
            String sql = "SELECT * FROM Messages";
            Connection conn = sqliteConnection.dbConnector();
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while(rs.next())
            {
                String from = rs.getString("Sender");
                String subject = rs.getString("Subject");
                String to = rs.getString("Recieve");
                if(recieve.equals(to))
                {
                    messagesTable.setValueAt(subject, currentMCount, 1);
                    messagesTable.setValueAt(from, currentMCount, 0);
                    currentMCount++;
                }
            }
            currentMCount = 0;
            conn.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        backButtonM = new javax.swing.JButton();
        messagesLabel = new javax.swing.JLabel();
        messagesInbox = new javax.swing.JScrollPane();
        messagesTable = new javax.swing.JTable();
        sendMessagePanel = new javax.swing.JPanel();
        to = new javax.swing.JLabel();
        toEntry = new javax.swing.JTextField();
        subject = new javax.swing.JLabel();
        subjectEntry = new javax.swing.JTextField();
        message = new javax.swing.JLabel();
        composeMessagePane = new javax.swing.JScrollPane();
        composeMessageArea = new javax.swing.JEditorPane();
        sendButton = new javax.swing.JButton();
        sendmessageLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        backButtonM.setText("<< Back");
        backButtonM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonMActionPerformed(evt);
            }
        });

        messagesLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        messagesLabel.setText("Messages");

        messagesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "From", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        messagesTable.setColumnSelectionAllowed(true);
        messagesTable.getTableHeader().setReorderingAllowed(false);
        messagesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messagesTableMouseClicked(evt);
            }
        });
        messagesInbox.setViewportView(messagesTable);
        messagesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        sendMessagePanel.setBackground(new java.awt.Color(255, 255, 204));

        to.setText("To:");

        subject.setText("Subject");

        message.setText("Message:");

        composeMessagePane.setViewportView(composeMessageArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sendMessagePanelLayout = new javax.swing.GroupLayout(sendMessagePanel);
        sendMessagePanel.setLayout(sendMessagePanelLayout);
        sendMessagePanelLayout.setHorizontalGroup(
            sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendMessagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(composeMessagePane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 923, Short.MAX_VALUE)
                    .addComponent(subjectEntry, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(toEntry)
                    .addGroup(sendMessagePanelLayout.createSequentialGroup()
                        .addGroup(sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(to)
                            .addComponent(subject)
                            .addComponent(message))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sendMessagePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        sendMessagePanelLayout.setVerticalGroup(
            sendMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendMessagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(to)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subjectEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(message)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(composeMessagePane, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(sendButton)
                .addContainerGap())
        );

        sendmessageLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        sendmessageLabel.setText("Send Message");

        deleteButton.setText("Delete Currently Selected Message");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendMessagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButtonM)
                            .addComponent(sendmessageLabel)
                            .addComponent(messagesInbox, javax.swing.GroupLayout.PREFERRED_SIZE, 914, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(messagesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton)
                        .addGap(58, 58, 58))))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButtonM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messagesLabel)
                    .addComponent(refreshButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagesInbox, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendmessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendMessagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try{
            String recieve = User.getUsername();
            String sql = "SELECT * FROM Messages";
            Connection conn = sqliteConnection.dbConnector();
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while(rs.next())
            {
                String from = rs.getString("Sender");
                String subject = rs.getString("Subject");
                String to = rs.getString("Recieve");
                if(recieve.equals(to))
                {
                    messagesTable.setValueAt(subject, currentMCount, 1);
                    messagesTable.setValueAt(from, currentMCount, 0);
                    currentMCount++;
                }
            }
            while(currentMCount < 30)
            {
                messagesTable.setValueAt("", currentMCount, 1);
                messagesTable.setValueAt("", currentMCount, 0);
                currentMCount++;
            }
            currentMCount = 0;
            conn.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try{
            if(messagesTable.getSelectedRow() != -1)
            {
                String from = (String) messagesTable.getValueAt(messagesTable.getSelectedRow(), 0);
                String subject = (String) messagesTable.getValueAt(messagesTable.getSelectedRow(), 1);
                String sql = "SELECT * FROM Messages";
                Connection conn = sqliteConnection.dbConnector();
                PreparedStatement pst = conn.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                while(rs.next())
                {
                    String recieve = rs.getString("Recieve");
                    String Cf = rs.getString("Sender");
                    String Cs = rs.getString("Subject");
                    String message = rs.getString("Message");
                    if(from.equals(Cf) && subject.equals(Cs) && recieve.equals(User.getUsername()))
                    {
                        sql = "DELETE from Messages WHERE Recieve=? AND Sender=? AND Subject=? AND Message=?";
                        pst = conn.prepareStatement(sql);

                        pst.setString(1, User.getUsername());
                        pst.setString(2, from);
                        pst.setString(3, subject);
                        pst.setString(4, message);
                        pst.execute();
                        
                        sql = "SELECT * FROM Messages";
                        pst = conn.prepareStatement(sql);
                        rs = pst.executeQuery();
                        
                        while(rs.next())
                        {
                            from = rs.getString("Sender");
                            subject = rs.getString("Subject");
                            String to = rs.getString("Recieve");
                            if(recieve.equals(to))
                            {
                                messagesTable.setValueAt(subject, currentMCount, 1);
                                messagesTable.setValueAt(from, currentMCount, 0);
                                currentMCount++;
                            }
                        }
                        while(currentMCount < 30)
                        {
                            messagesTable.setValueAt("", currentMCount, 1);
                            messagesTable.setValueAt("", currentMCount, 0);
                            currentMCount++;
                        }
                        currentMCount = 0;

                        JOptionPane.showMessageDialog(null, "Message deleted.");
                        conn.close();
                        return;
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please select a message first.");
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try{
            String sql = "SELECT username FROM UserData";
            Connection conn = sqliteConnection.dbConnector();
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while(rs.next())
            {
                String check = rs.getString("username");
                if(check.equals(toEntry.getText()))
                {
                    sql = "Insert into Messages (Recieve, Sender, Subject, Message) values (?,?,?,?)";
                    pst = conn.prepareStatement(sql);
            
                    pst.setString(1, toEntry.getText());
                    pst.setString(2, User.getUsername());
                    pst.setString(3, subjectEntry.getText());
                    pst.setString(4, composeMessageArea.getText());
                    pst.execute();

                    conn.close();
                    JOptionPane.showMessageDialog(null, "Message Sent!");
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, "Invalid Username. Does not Exist.");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void messagesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messagesTableMouseClicked
        try{
            String from = (String) messagesTable.getValueAt(messagesTable.getSelectedRow(), 0);
            String subject = (String) messagesTable.getValueAt(messagesTable.getSelectedRow(), 1);
            if(from == null || subject == null)
            {
                return;
            }
            else
            {
                
                String sql = "SELECT * FROM Messages";
                Connection conn = sqliteConnection.dbConnector();
                PreparedStatement pst = conn.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                while(rs.next())
                {
                    String recieve = rs.getString("Recieve");
                    String Cf = rs.getString("Sender");
                    String Cs = rs.getString("Subject");
                    String message = rs.getString("Message");
                    if(from.equals(Cf) && subject.equals(Cs) && recieve.equals(User.getUsername()))
                    {
                        new MessageDisplay(from, subject, message).setVisible(true);
                        conn.close();
                        return;
                    }
                }
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_messagesTableMouseClicked

    private void backButtonMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonMActionPerformed
        String role = User.getRole();

        if(role.equals("doctor"))
        {
            new DoctorUI().setVisible(true);
            this.dispose();
        }
        else if(role.equals("patient"))
        {
            new PatientUI().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_backButtonMActionPerformed

    
    private void backActionPerformed(java.awt.event.ActionEvent evt) {
        new PatientUI().setVisible(true);
        this.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MessagesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MessagesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MessagesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MessagesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MessagesUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButtonM;
    private javax.swing.JEditorPane composeMessageArea;
    private javax.swing.JScrollPane composeMessagePane;
    private javax.swing.JButton deleteButton;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel message;
    private javax.swing.JScrollPane messagesInbox;
    private javax.swing.JLabel messagesLabel;
    private javax.swing.JTable messagesTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JPanel sendMessagePanel;
    private javax.swing.JLabel sendmessageLabel;
    private javax.swing.JLabel subject;
    private javax.swing.JTextField subjectEntry;
    private javax.swing.JLabel to;
    private javax.swing.JTextField toEntry;
    // End of variables declaration//GEN-END:variables
}
